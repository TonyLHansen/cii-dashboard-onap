#!/usr/bin/env python3

"""Search the HTML files for the proper versions of jquery and datatables"""

import argparse
import re
import sys

import requests

URL_JQUERY = "https://jquery.com/download/"
URL_DATATABLES = "https://datatables.net/download/"

GITVERSIONSTAMP = "2023-06-08-12-54"


def search_jquery(args):
    """Search for jquery"""
    jq = requests.get(URL_JQUERY, timeout=90)
    # print(jq.text)
    m = re.search("(https://code[.]jquery[.]com/jquery-[0-9.]*[.]min[.]js)", jq.text)
    if not m:
        sys.exit(f"Cannot find jquery version in {URL_JQUERY}")

    jquery_string = m.group(1)
    # print(f"jquery_string={jquery_string}")

    err = 0
    for fn in args.files:
        found = False
        with open(fn, encoding="UTF-8") as fp:
            for l in fp:
                if jquery_string in l:
                    found = True

        if not found:
            print(f"Did not find jquery version {jquery_string} in {fn}")
            err += 1
        else:
            print(f"Found jquery version {jquery_string} in {fn}")
    return err


def search_datatables(args):
    """Search for datatables"""
    dt = requests.get(URL_DATATABLES, timeout=90)
    # print(dt.text)
    datatables = {
        "DataTables": {
            "prefix": "https://cdn.datatables.net/",
            "js-suffix": "/js/jquery.dataTables.min.js",
            "css-suffix": "/css/jquery.dataTables.min.css",
            "js-found": 0,
            "css-found": 0,
        },
        "Buttons": {
            "prefix": "https://cdn.datatables.net/buttons/",
            "js-suffix": "/js/dataTables.buttons.min.js",
            "css-suffix": "/css/buttons.dataTables.min.css",
            "js-found": 0,
            "css-found": 0,
        },
        "Column visibility": {
            "prefix": "https://cdn.datatables.net/buttons/",
            "js-suffix": "/js/buttons.colVis.min.js",
            "css-suffix": None,
            "js-found": 0,
            "css-found": 0,
        },
        "Print view": {
            "prefix": "https://cdn.datatables.net/buttons/",
            "js-suffix": "/js/buttons.print.min.js",
            "css-suffix": None,
            "js-found": 0,
            "css-found": 0,
        },
        "ColReorder": {
            "prefix": "https://cdn.datatables.net/colreorder/",
            "js-suffix": "/js/dataTables.colReorder.min.js",
            "css-suffix": "/css/colReorder.dataTables.min.css",
            "js-found": 0,
            "css-found": 0,
        },
        "FixedHeader": {
            "prefix": "https://cdn.datatables.net/fixedheader/",
            "js-suffix": "/js/dataTables.fixedHeader.min.js",
            "css-suffix": "/css/fixedHeader.dataTables.min.css",
            "js-found": 0,
            "css-found": 0,
        },
        "Responsive": {
            "prefix": "https://cdn.datatables.net/responsive/",
            "js-suffix": "/js/dataTables.responsive.min.js",
            "css-suffix": "/css/responsive.dataTables.min.css",
            "js-found": 0,
            "css-found": 0,
        },
    }

    for k, v in datatables.items():
        # print(f"k={k}")
        m = re.search(f'(<input .*value="([^"]*)" data-shortname="([^"]*)" data-longname="{k}")', dt.text)
        if not m:
            print(f"Did not find data-longname={k}")
            continue
        # print("1", m.group(1))
        value = m.group(2)
        # print(f"value={value}")
        shortname = m.group(3)
        # print(f"shortname={shortname}")
        v["value"] = value
        v["shortname"] = shortname
        version = value[len(shortname) + 1 :]
        # print(f"version={version}")
        v["version"] = version

    err = 0
    for fn in args.files:
        for k, v in datatables.items():
            v["js-found"] = 0
            v["css-found"] = 0

        with open(fn, encoding="UTF-8") as fp:
            for l in fp:
                for k, v in datatables.items():
                    if '"' + v["prefix"] + v["version"] + v["js-suffix"] + '"' in l:
                        # print(f"found js {k} {v['version']} in\n    {l}")
                        v["js-found"] += 1
                    if v["css-suffix"] and ('"' + v["prefix"] + v["version"] + v["css-suffix"] + '"') in l:
                        # print(f"found css {k} {v['version']} in\n    {l}")
                        v["css-found"] += 1

        for k, v in datatables.items():
            if v["js-found"] == 0:
                print(f"Did not find {v['prefix']}{v['version']}{v['js-suffix']}")
                err += 1
            elif v["js-found"] > 1:
                print(
                    f"Found too many instances ({v['js-found']}) of {v['prefix']}{v['version']}{v['js-suffix']} in {fn}"
                )
                err += 1
            else:
                print(f"Found {v['prefix']}{v['version']}{v['js-suffix']} in {fn} in {fn}")

            if v["css-suffix"]:
                if v["css-found"] == 0:
                    err += 1
                    print(f"Did not find {v['prefix']}{v['version']}{v['css-suffix']} in {fn}")
                elif v["css-found"] > 1:
                    err += 1
                    print(
                        f"Found too many instances ({v['css-found']}) of {v['prefix']}{v['version']}{v['css-suffix']} in {fn}"
                    )
                else:
                    print(f"Found {v['prefix']}{v['version']}{v['css-suffix']} in {fn}")

    return err


def main():
    """main driver"""
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-v", "--verbose", help="Verbose, may be specified multiple times", action="count", default=0)
    parser.add_argument("-V", "--version", help="Print the version", action="store_true")
    parser.add_argument("files", nargs="+")
    args = parser.parse_args()

    if args.version:
        print(GITVERSIONSTAMP)

    err = 0
    err += search_jquery(args)
    err += search_datatables(args)
    if err:
        print("ERROR")
    else:
        print("DONE")
    sys.exit(err if err < 255 else 255)


if __name__ == "__main__":
    main()
