//	"cpe": { "section": "Basics", "required": true, "description": "What is the Common Platform Enumeration (CPE) name for the project (if it has one)?", "type": "project" },
//	"implementation_languages": { "section": "Basics", "required": true, "description": "What programming language(s) are used to implement the project?", "type": "project" },
//	"repo_url": { "section": "Basics", "required": true, "description": "What is the URL for the version control repository (it may be the same as the project URL)?", "type": "project" },
var badgeDescriptions = {
    "bronze": {
	"build": { "section": "Quality", "required": true, "description": "If the software produced by the project requires building for use, the project MUST provide a working build system that can automatically rebuild the software from source code.", "type": "Project Quality", "details": "A build system determines what actions need to occur to rebuild the software (and in what order), and then performs those steps. For example, it can invoke a compiler to compile the source code. If an executable is created from source code, it must be possible to modify the project's source code and then generate an updated executable with those modifications. If the software produced by the project depends on external libraries, the build system does <em>not</em> need to build those external libraries. If there is no need to build anything to use the software after its source code is modified, select 'not applicable (N/A)." },
	"build_common_tools": { "section": "Quality", "required": false, "description": "It is SUGGESTED that common tools be used for building the software.", "type": "Project Quality", "details": "For example, Maven, Ant, cmake, the autotools, make, rake (Ruby), or <a href='https://cran.r-project.org/web/packages/devtools/index.html >devtools</a> (R)." },
	"build_floss_tools": { "section": "Quality", "required": false, "description": "The project SHOULD be buildable using only FLOSS tools.", "type": "FLOSS", "details": "" },
	"contribution": { "section": "Basics", "required": true, "description": "The information on how to contribute MUST explain the contribution process (e.g., are pull requests used?) (URL required)", "type": "People", "details": "We presume that <a href='https://guides.github.com/activities/contributing-to-open-source/'>projects on GitHub use issues and pull requests</a> unless otherwise noted. This information can be short, e.g., stating that the project uses pull requests, an issue tracker, or posts to a mailing list (which one?)" },
	"contribution_requirements": { "section": "Basics", "required": false, "description": "The information on how to contribute SHOULD include the requirements for acceptable contributions (e.g., a reference to any required coding standard). (URL required)", "type": "People", "details": "" },
	"crypto_call": { "section": "Security", "required": false, "description": "If the software produced by the project is an application or library, and its primary purpose is not to implement cryptography, then it SHOULD only call on software specifically designed to implement cryptographic functions; it SHOULD NOT re-implement its own.", "type": "Application Quality", "details": "" },
	"crypto_floss": { "section": "Security", "required": true, "description": "All functionality in the software produced by the project that depends on cryptography MUST be implementable using FLOSS.", "type": "FLOSS", "details": "See the <a href='https://opensource.org/osr >Open Standards Requirement for Software by the Open Source Initiative</a>." },
	"crypto_keylength": { "section": "Security", "required": true, "description": "The security mechanisms within the software produced by the project MUST use default keylengths that at least meet the NIST minimum requirements through the year 2030 (as stated in 2012). It MUST be possible to configure the software so that smaller keylengths are completely disabled.", "type": "Application Quality", "details": "These minimum bitlengths are: symmetric key 112, factoring modulus 2048, discrete logarithm key 224, discrete logarithmic group 2048, elliptic curve 224, and hash 224 (password hashing is not covered by this bitlength, more information on password hashing can be found in the <a href='#crypto_password_storage'>crypto_password_storage</a> criterion). See <a href='https://www.keylength.com/ >https://www.keylength.com</a> for a comparison of keylength recommendations from various organizations. The software MAY allow smaller keylengths in some configurations (ideally it would not, since this allows downgrade attacks, but shorter keylengths are sometimes necessary for interoperability)." },
	"crypto_password_storage": { "section": "Security", "required": true, "description": "If the software produced by the project causes the storing of passwords for authentication of external users, the passwords MUST be stored as iterated hashes with a per-user salt by using a key stretching (iterated) algorithm (e.g., PBKDF2, Bcrypt or Scrypt).", "type": "Application Quality", "details": "This criterion applies only when the software is enforcing authentication of users using passwords, such as server-side web applications. It does not apply in cases where the software stores passwords for authenticating into other systems (e.g., the software implements a client for some other system), since at least parts of that software must have often access to the unhashed password." },
	"crypto_pfs": { "section": "Security", "required": false, "description": "The security mechanisms within the software produced by the project SHOULD implement perfect forward secrecy for key agreement protocols so a session key derived from a set of long-term keys cannot be compromised if one of the long-term keys is compromised in the future.", "type": "Application Quality", "details": "" },
	"crypto_published": { "section": "Security", "required": true, "description": "The software produced by the project MUST use, by default, only cryptographic protocols and algorithms that are publicly published and reviewed by experts (if cryptographic protocols and algorithms are used).", "type": "Application Quality", "details": "These cryptographic criteria do not always apply because some software has no need to directly use cryptographic capabilities." },
	"crypto_random": { "section": "Security", "required": true, "description": "The security mechanisms within the software produced by the project MUST generate all cryptographic keys and nonces using a cryptographically secure random number generator, and MUST NOT do so using generators that are cryptographically insecure.", "type": "Application Quality", "details": "A cryptographically secure random number generator may be a hardware random number generator, or it may be a cryptographically secure pseudo-random number generator (CSPRNG) using an algorithm such as Hash_DRBG, HMAC_DRBG, CTR_DRBG, Yarrow, or Fortuna. Examples of calls to <em>secure</em> random number generators include Java's java.security.SecureRandom and JavaScript's window.crypto.getRandomValues. Examples of calls to <em>insecure</em> random number generators include Java's java.util.Random and JavaScript's Math.random." },
	"crypto_weaknesses": { "section": "Security", "required": false, "description": "The default security mechanisms within the software produced by the project SHOULD NOT depend on cryptographic algorithms or modes with known serious weaknesses (e.g., the SHA-1 cryptographic hash algorithm or the CBC mode in SSH).", "type": "Application Quality", "details": "Concerns about CBC mode in SSH are discussed in <a href='https://www.kb.cert.org/vuls/id/958563 >CERT: SSH CBC vulnerability</a>." },
	"crypto_working": { "section": "Security", "required": true, "description": "The default security mechanisms within the software produced by the project MUST NOT depend on broken cryptographic algorithms (e.g., MD4, MD5, single DES, RC4, Dual_EC_DRBG), or use cipher modes that are inappropriate to the context, unless they are necessary to implement an interoperable protocol (where the protocol implemented is the most recent version of that standard broadly supported by the network ecosystem, that ecosystem requires the use of such an algorithm or mode, and that ecosystem does not offer any more secure alternative). The documentation MUST describe any relevant security risks and any known mitigations if these broken algorithms or modes are necessary for an interoperable protocol.", "type": "Application Quality", "details": "ECB mode is almost never appropriate because it reveals identical blocks within the ciphertext as demonstrated by the <a href='https://blog.filippo.io/the-ecb-penguin/ >ECB penguin</a>, and CTR mode is often inappropriate because it does not perform authentication and causes duplicates if the input state is repeated. In many cases it's best to choose a block cipher algorithm mode designed to combine secrecy and authentication, e.g., Galois/Counter Mode (GCM) and EAX. Projects MAY allow users to enable broken mechanisms (e.g., during configuration) where necessary for compatibility, but then users know they're doing it." },
	"delivery_mitm": { "section": "Security", "required": true, "description": "The project MUST use a delivery mechanism that counters MITM attacks. Using https or ssh+scp is acceptable.", "type": "Infrastructure", "details": "An even stronger mechanism is releasing the software with digitally signed packages, since that mitigates attacks on the distribution system, but this only works if the users can be confident that the public keys for signatures are correct <em>and</em> if the users will actually check the signature." },
	"delivery_unsigned": { "section": "Security", "required": true, "description": "A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved over http and used without checking for a cryptographic signature.", "type": "Infrastructure", "details": "These hashes can be modified in transit." },
	"description_good": { "section": "Basics", "required": true, "description": "The project website MUST succinctly describe what the software does (what problem does it solve?).", "type": "Project Quality", "details": "This MUST be in language that potential users can understand (e.g., it uses minimal jargon)." },
	"discussion": { "section": "Basics", "required": true, "description": "The project MUST have one or more mechanisms for discussion (including proposed changes and issues) that are searchable, allow messages and topics to be addressed by URL, enable new people to participate in some of the discussions, and do not require client-side installation of proprietary software.", "type": "Project Quality", "details": "Examples of acceptable mechanisms include archived mailing list(s), GitHub issue and pull request discussions, Bugzilla, Mantis, and Trac. Asynchronous discussion mechanisms (like IRC) are acceptable if they meet these criteria; make sure there is a URL-addressable archiving mechanism. Proprietary JavaScript, while discouraged, is permitted." },
	"documentation_basics": { "section": "Basics", "required": true, "description": "The project MUST provide basic documentation for the software produced by the project.", "type": "Project Quality", "details": "This documentation must be in some media (such as text or video) that includes: how to install it, how to start it, how to use it (possibly with a tutorial using examples), and how to use it securely (e.g., what to do and what not to do) if that is an appropriate topic for the software. The security documentation need not be long. The project MAY use hypertext links to non-project material as documentation. If the project does not produce software, choose 'not applicable (N/A)." },
	"documentation_interface": { "section": "Basics", "required": true, "description": "The project MUST provide reference documentation that describes the external interface (both input and output) of the software produced by the project.", "type": "Project Quality", "details": "The documentation of an external interface explains to an end-user or developer how to use it. This would include its application program interface (API) if the software has one. If it is a library, document the major classes/types and methods/functions that can be called. If it is a web application, define its URL interface (often its REST interface). If it is a command-line interface, document the parameters and options it supports. In many cases it's best if most of this documentation is automatically generated, so that this documentation stays synchronized with the software as it changes, but this isn't required. The project MAY use hypertext links to non-project material as documentation. Documentation MAY be automatically generated (where practical this is often the best way to do so). Documentation of a REST interface may be generated using Swagger/OpenAPI. Code interface documentation MAY be generated using tools such as <a href='http://usejsdoc.org/'>JSDoc</a> (JavaScript), <a href='https://esdoc.org/'>ESDoc</a> (JavaScript), pydoc (Python), <a href='https://cran.r-project.org/web/packages/devtools/index.html'>devtools</a> (R), <a href='https://cran.r-project.org/web/packages/pkgdown/index.html'>pkgdown</a> (R), and Doxygen (many). Merely having comments in implementation code is not sufficient to satisfy this criterion; there needs to be an easy way to see the information without reading through all the source code. If the project does not produce software, choose 'not applicable (N/A)." },
	"dynamic_analysis": { "section": "Analysis", "required": false, "description": "It is SUGGESTED that at least one dynamic analysis tool be applied to any proposed major production release of the software before its release.", "type": "Application Quality", "details": "A dynamic analysis tool examines the software by executing it with specific inputs. For example, the project MAY use a fuzzing tool (e.g., <a href='http://lcamtuf.coredump.cx/afl/'>American Fuzzy Lop</a>) or a web application scanner (e.g., <a href='https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project'>OWASP ZAP</a> or <a href='https://w3af.org/'>w3af</a>). In some cases the <a href='https://github.com/google/oss-fuzz#introduction'>OSS-Fuzz</a> project may be willing to apply fuzz testing to your project. For purposes of this criterion the dynamic analysis tool needs to vary the inputs in some way to look for various kinds of problems <em>or</em> be an automated test suite with at least 80% branch coverage. The <a href='https://en.wikipedia.org/wiki/Dynamic_program_analysis'>Wikipedia page on dynamic analysis</a> and the <a href='https://www.owasp.org/index.php/Fuzzing >OWASP page on fuzzing</a> identify some dynamic analysis tools. The analysis tool(s) MAY be focused on looking for security vulnerabilities, but this is not required." },
	"dynamic_analysis_enable_assertions": { "section": "Analysis", "required": false, "description": "It is SUGGESTED that the software produced by the project include many run-time assertions that are checked during dynamic analysis.", "type": "Application Quality", "details": "" },
	"dynamic_analysis_fixed": { "section": "Analysis", "required": true, "description": "All medium and high severity exploitable vulnerabilities discovered with dynamic code analysis MUST be fixed in a timely way after they are confirmed.", "type": "Application Quality", "details": "A vulnerability is medium to high severity if its <a href='https://nvd.nist.gov/cvss.cfm'>CVSS 2.0</a> base score is 4. If you are not running dynamic code analysis and thus have not found any vulnerabilities in this way, choose 'not applicable (N/A)." },
	"dynamic_analysis_unsafe": { "section": "Analysis", "required": false, "description": "It is SUGGESTED that if the software produced by the project includes software written using a memory-unsafe language (e.g., C or C++), then at least one dynamic tool (e.g., a fuzzer or web application scanner) be routinely used in combination with a mechanism to detect memory safety problems such as buffer overwrites. If the project does not produce software written in a memory-unsafe language, choose 'not applicable' (N/A).", "type": "Application Quality", "details": "Examples of mechanisms to detect memory safety problems include <a href='https://github.com/google/sanitizers/wiki/AddressSanitizer'>Address Sanitizer (ASAN)</a> (available in GCC and LLVM), <a href='https://clang.llvm.org/docs/MemorySanitizer.html'>Memory Sanitizer</a>, and <a href='http://valgrind.org/'>valgrind</a>. Other potentially-used tools include <a href='https://clang.llvm.org/docs/ThreadSanitizer.html'>thread sanitizer</a> and <a href='https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html >undefined behavior sanitizer</a>. Widespread assertions would also work." },
	"english": { "section": "Basics", "required": false, "description": "The project SHOULD provide documentation in English and be able to accept bug reports and comments about code in English.", "type": "Project Quality", "details": "English is currently the <a href='https://en.wikipedia.org/wiki/Lingua_franca >lingua franca</a> of computer technology; supporting English increases the number of different potential developers and reviewers worldwide. A project can meet this criterion even if its core developers' primary language is not English." },
	"enhancement_responses": { "section": "Reporting", "required": false, "description": "The project SHOULD respond to a majority (>50%) of enhancement requests in the last 2-12 months (inclusive).", "type": "Project Quality", "details": "The response MAY be 'no' or a discussion about its merits. The goal is simply that there be some response to some requests, which indicates that the project is still alive. For purposes of this criterion, projects need not count fake requests (e.g., from spammers or automated systems). If a project is no longer making enhancements, please select 'unmet' and include the URL that makes this situation clear to users. If a project tends to be overwhelmed by the number of enhancement requests, please select 'unmet and explain." },
	"floss_license": { "section": "Basics", "required": true, "description": "The software produced by the project MUST be released as FLOSS.", "type": "FLOSS", "details": "FLOSS is software released in a way that meets the <a href='https://opensource.org/osd-annotated'>Open Source Definition</a> or <a href='https://www.gnu.org/philosophy/free-sw.en.html'>Free Software Definition</a>. Examples of such licenses include the <a href='https://creativecommons.org/publicdomain/zero/1.0/'>CC0</a>, <a href='https://opensource.org/licenses/MIT'>MIT</a>, <a href='https://opensource.org/licenses/BSD-2-Clause'>BSD 2-clause</a>, <a href='https://opensource.org/licenses/BSD-3-Clause'>BSD 3-clause revised</a>, <a href='https://opensource.org/licenses/Apache-2.0'>Apache 2.0</a>, <a href='https://opensource.org/licenses/lgpl-license'>Lesser GNU General Public License (LGPL)</a>, and the <a href='https://opensource.org/licenses/gpl-license'>GNU General Public License (GPL)</a>. For our purposes, this means that the license MUST be: <ul> <li><a href='https://opensource.org/licenses'>an approved license by the Open Source Initiative (OSI)</a>, or</li> <li><a href='https://www.gnu.org/licenses/license-list.html'>a free license as approved by the Free Software Foundation (FSF)</a>, or</li> <li><a href='https://www.debian.org/legal/licenses/'>a free license acceptable to Debian main</a>, or</li> <li><a href='https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing'>a 'good' license according to Fedora</a>.</li> </ul> The software MAY also be licensed other ways (e.g., 'GPLv2 or proprietary' is acceptable)." },
	"floss_license_osi": { "section": "Basics", "required": false, "description": "It is SUGGESTED that any required license(s) for the software produced by the project be approved by the Open Source Initiative (OSI).", "type": "FLOSS", "details": "The OSI uses a rigorous approval process to determine which licenses are OSS." },
	"homepage_url": { "section": "Basics", "required": true, "description": "What is the URL for the project (as a whole)?", "type": "Project Quality", "details": "" },
	"interact": { "section": "Basics", "required": true, "description": "The project website MUST provide information on how to: obtain, provide feedback (as bug reports or enhancements), and contribute to the software.", "type": "Project Quality", "details": "" },
	"know_common_errors": { "section": "Security", "required": true, "description": "At least one of the project's primary developers MUST know of common kinds of errors that lead to vulnerabilities in this kind of software, as well as at least one method to counter or mitigate each of them.", "type": "People", "details": "Examples (depending on the type of software) include SQL injection, OS injection, classic buffer overflow, cross-site scripting, missing authentication, and missing authorization. See the <a href='https://cwe.mitre.org/top25/'>CWE/SANS top 25</a> or <a href='https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project >OWASP Top 10</a> for commonly used lists." },
	"know_secure_design": { "section": "Security", "required": true, "description": "The project MUST have at least one primary developer who knows how to design secure software. (See ‘details’ for the exact requirements.)", "type": "People", "details": "This requires understanding the following design principles, including the 8 principles from <a href='https://web.mit.edu/Saltzer/www/publications/protection/'>Saltzer and Schroeder</a>: <ul> <li>economy of mechanism (keep the design as simple and small as practical, e.g., by adopting sweeping simplifications) </li><li>fail-safe defaults (access decisions should deny by default, and projects' installation should be secure by default) </li><li>complete mediation (every access that might be limited must be checked for authority and be non-bypassable) </li><li>open design (security mechanisms should not depend on attacker ignorance of its design, but instead on more easily protected and changed information like keys and passwords) </li><li>separation of privilege (ideally, access to important objects should depend on more than one condition, so that defeating one protection system won't enable complete access. E.G., multi-factor authentication, such as requiring both a password and a hardware token, is stronger than single-factor authentication) </li><li>least privilege (processes should operate with the least privilege necessary) </li><li>least common mechanism (the design should minimize the mechanisms common to more than one user and depended on by all users, e.g., directories for temporary files) </li><li>psychological acceptability (the human interface must be designed for ease of use - designing for 'least astonishment' can help) </li><li>limited attack surface (the attack surface - the set of the different points where an attacker can try to enter or extract data - should be limited) </li><li>input validation with whitelists (inputs should typically be checked to determine if they are valid before they are accepted; this validation should use whitelists (which only accept known-good values), not blacklists (which attempt to list known-bad values)). </li></ul> A 'primary developer in a project is anyone who is familiar with the project's code base, is comfortable making changes to it, and is acknowledged as such by most other participants in the project. A primary developer would typically make a number of contributions over the past year (via code, documentation, or answering questions). Developers would typically be considered primary developers if they initiated the project (and have not left the project more than three years ago), have the option of receiving information on a private vulnerability reporting channel (if there is one), can accept commits on behalf of the project, or perform final releases of the project software. If there is only one developer, that individual is the primary developer." },
	"license_location": { "section": "Basics", "required": true, "description": "The project MUST post the license(s) of its results in a standard location in their source repository. (URL required)", "type": "Project Quality", "details": "E.g., as a top-level file named LICENSE or COPYING. License filenames MAY be followed by an extension such as '.txt' or '.md . Note that this criterion is only a requirement on the source repository. You do NOT need to include the license file when generating something from the source code (such as an executable, package, or container). For example, when generating an R package for the Comprehensive R Archive Network (CRAN), follow standard CRAN practice: if the license is a standard license, use the standard short license specification (to avoid installing yet another copy of the text) and list the LICENSE file in an exclusion file such as .Rbuildignore. Similarly, when creating a Debian package, you may put a link in the copyright file to the license text in /usr/share/common-licenses, and exclude the license file from the created package (e.g., by deleting the file after calling dh_auto_install). We do encourage including machine-readable license information in generated formats where practical." },
	"no_leaked_credentials": { "section": "Security", "required": true, "description": "The public repositories MUST NOT leak a valid private credential (e.g., a working password or private key) that is intended to limit public access.", "type": "Project Quality", "details": "A project MAY leak 'sample credentials for testing and unimportant databases, as long as they are not intended to limit public access." },
	"release_notes": { "section": "Change Control", "required": true, "description": "The project MUST provide, in each release, release notes that are a human-readable summary of major changes in that release to help users determine if they should upgrade and what the upgrade impact will be. The release notes MUST NOT be the raw output of a version control log (e.g., the 'git log' command results are not release notes). Projects whose results are not intended for reuse in multiple locations (such as the software for a single website or service) AND employ continuous delivery MAY select 'N/A'. (URL required)", "type": "Project Quality", "details": "The release notes MAY be implemented in a variety of ways. Many projects provide them in a file named 'NEWS', 'CHANGELOG', or 'ChangeLog', optionally with extensions such as '.txt', '.md', or '.html'. Historically the term 'change log' meant a log of <em>every</em> change, but to meet these criteria what is needed is a human-readable summary. The release notes MAY instead be provided by version control system mechanisms such as the <a href='https://github.com/blog/1547-release-your-software >GitHub Releases workflow</a>." },
	"release_notes_vulns": { "section": "Change Control", "required": true, "description": "The release notes MUST identify every publicly known vulnerability with a CVE assignment or similar that is fixed in each new release, unless users typically cannot practically update the software themselves. If there are no release notes or there have been no publicly known vulnerabilities, choose 'not applicable' (N/A).", "type": "Project Quality", "details": "If users typically cannot practically update the software themselves on their computers, but must instead depend on a middleman to perform the upgrade (as is often the case for a kernel and low-level software that is intertwined with a kernel), the project may choose 'notapplicable (N/A)." },
	"repo_distributed": { "section": "Change Control", "required": false, "description": "It is SUGGESTED that common distributed version control software be used (e.g., git) for the project's source repository.", "type": "Infrastructure", "details": "Git is not specifically required and projects can use centralized version control software (such as subversion) with justification." },
	"repo_interim": { "section": "Change Control", "required": true, "description": "To enable collaborative review, the project's source repository MUST include interim versions for review between releases; it MUST NOT include only final releases.", "type": "Infrastructure", "details": "Projects MAY choose to omit specific interim versions from their public source repositories (e.g., ones that fix specific non-public security vulnerabilities, may never be publicly released, or include material that cannot be legally posted and are not in the final release)." },
	"repo_public": { "section": "Change Control", "required": true, "description": "The project MUST have a version-controlled source repository that is publicly readable and has a URL.", "type": "Infrastructure", "details": "The URL MAY be the same as the project URL. The project MAY use private (non-public) branches in specific cases while the change is not publicly released (e.g., for fixing a vulnerability before it is revealed to the public)." },
	"repo_track": { "section": "Change Control", "required": true, "description": "The project's source repository MUST track what changes were made, who made the changes, and when the changes were made.", "type": "Infrastructure", "details": "" },
	"report_archive": { "section": "Reporting", "required": true, "description": "The project MUST have a publicly available archive for reports and responses for later searching. (URL required)", "type": "Infrastructure", "details": "" },
	"report_process": { "section": "Reporting", "required": true, "description": "The project MUST provide a process for users to submit bug reports (e.g., using an issue tracker or a mailing list). (URL required)", "type": "Infrastructure", "details": "" },
	"report_responses": { "section": "Reporting", "required": true, "description": "The project MUST acknowledge a majority of bug reports submitted in the last 2-12 months (inclusive); the response need not include a fix.", "type": "Project Quality", "details": "" },
	"report_tracker": { "section": "Reporting", "required": false, "description": "The project SHOULD use an issue tracker for tracking individual issues.", "type": "Infrastructure", "details": "" },
	"sites_https": { "section": "Basics", "required": true, "description": "The project sites (website, repository, and download URLs) MUST support HTTPS using TLS.", "type": "Infrastructure", "details": "This requires that the project home page URL and the version control repository URL begin with 'https:', not 'http:'. You can get free certificates from <a href='https://letsencrypt.org/'>Let's Encrypt</a>. Projects MAY implement this criterion using (for example) <a href='https://help.github.com/articles/securing-your-github-pages-site-with-https/'>GitHub pages</a>, <a href='https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/'>GitLab pages</a>, or <a href='https://sourceforge.net/blog/introducing-https-for-project-websites/ >SourceForge project pages</a>. If you support HTTP, we urge you to redirect the HTTP traffic to HTTPS." },
	"static_analysis": { "section": "Analysis", "required": true, "description": "At least one static code analysis tool (beyond compiler warnings and 'safe' language modes) MUST be applied to any proposed major production release of the software before its release, if there is at least one FLOSS tool that implements this criterion in the selected language.", "type": "Application Quality", "details": "A static code analysis tool examines the software code (as source code, intermediate code, or executable) without executing it with specific inputs. For purposes of this criterion, compiler warnings and 'safe' language modes do not count as static code analysis tools (these typically avoid deep analysis because speed is vital). Some static analysis tools focus on detecting generic defects, others focus on finding specific kinds of defects (such as vulnerabilities), and some do a combination. Examples of such static code analysis tools include <a href='http://cppcheck.sourceforge.net/'>cppcheck</a> (C, C++), <a href='https://clang-analyzer.llvm.org/'>clang static analyzer</a> (C, C++), <a href='https://spotbugs.github.io/'>SpotBugs</a> (Java), <a href='http://findbugs.sourceforge.net/'>FindBugs</a> (Java) (including <a href='https://h3xstream.github.io/find-sec-bugs/'>FindSecurityBugs</a>), <a href='https://pmd.github.io/'>PMD</a> (Java), <a href='https://brakemanscanner.org/'>Brakeman</a> (Ruby on Rails), <a href='https://cran.r-project.org/web/packages/lintr/index.html'>lintr</a> (R), <a href='https://cran.r-project.org/web/packages/goodpractice/index.html'>goodpractice</a> (R), <a href='https://scan.coverity.com/'>Coverity Quality Analyzer</a>, <a href='https://www.sonarqube.org/'>SonarQube</a>, <a href='https://www.codacy.com/'>Codacy</a>, and <a href='https://saas.hpe.com/en-us/software/sca'>HP Enterprise Fortify Static Code Analyzer</a>. Larger lists of tools can be found in places such as the <a href='https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis'>Wikipedia list of tools for static code analysis</a>, <a href='https://www.owasp.org/index.php/Static_Code_Analysis'>OWASP information on static code analysis</a>, <a href='https://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html'>NIST list of source code security analyzers</a>, and <a href='https://www.dwheeler.com/essays/static-analysis-tools.html'>Wheeler's list of static analysis tools</a>. The <a href='https://continuousassurance.org/ >SWAMP</a> is a no-cost platform for assessing vulnerabilities in software using a variety of tools. If there are no FLOSS static analysis tools available for the implementation language(s) used, select 'N/A'." },
	"static_analysis_common_vulnerabilities": { "section": "Analysis", "required": false, "description": "It is SUGGESTED that at least one of the static analysis tools used for the static_analysis criterion include rules or approaches to look for common vulnerabilities in the analyzed language or environment.", "type": "Application Quality", "details": "Static analysis tools that are specifically designed to look for common vulnerabilities are more likely to find them. That said, using any static tools will typically help find some problems, so we are suggesting but not requiring this for the 'passing' level badge." },
	"static_analysis_fixed": { "section": "Analysis", "required": true, "description": "All medium and high severity exploitable vulnerabilities discovered with static code analysis MUST be fixed in a timely way after they are confirmed.", "type": "Application Quality", "details": "A vulnerability is medium to high severity if its <a href='https://nvd.nist.gov/cvss.cfm >CVSS 2.0</a> is 4 or higher." },
	"static_analysis_often": { "section": "Analysis", "required": false, "description": "It is SUGGESTED that static source code analysis occur on every commit or at least daily.", "type": "Application Quality", "details": "" },
	"test": { "section": "Quality", "required": true, "description": "The project MUST use at least one automated test suite that is publicly released as FLOSS (this test suite may be maintained as a separate FLOSS project).", "type": "Application Quality", "details": "The project MAY use multiple automated test suites (e.g., one that runs quickly, vs. another that is more thorough but requires special equipment). There are many test frameworks and test support systems available, including <a href='https://www.seleniumhq.org/'>Selenium</a> (web browser automation), <a href='https://junit.org/'>Junit</a> (JVM, Java), <a href='https://cran.r-project.org/package=RUnit'>RUnit</a> (R), <a href='https://cran.r-project.org/web/packages/testthat/index.html >testthat</a> (R)." },
	"test_continuous_integration": { "section": "Quality", "required": false, "description": "It is SUGGESTED that the project implement continuous integration (where new or changed code is frequently integrated into a central code repository and automated tests are run on the result).", "type": "Application Quality", "details": "" },
	"test_invocation": { "section": "Quality", "required": false, "description": "A test suite SHOULD be invocable in a standard way for that language.", "type": "Application Quality", "details": "For example, 'make check', 'mvn test', or 'rake test (Ruby)." },
	"test_most": { "section": "Quality", "required": false, "description": "It is SUGGESTED that the test suite cover most (or ideally all) the code branches, input fields, and functionality.", "type": "Application Quality", "details": "" },
	"test_policy": { "section": "Quality", "required": true, "description": "The project MUST have a general policy (formal or not) that as major new functionality is added to the software produced by the project, tests of that functionality should be added to an automated test suite.", "type": "Project Quality", "details": "As long as a policy is in place, even by word of mouth, that says developers should add tests to the automated test suite for major new functionality, select 'Met.'" },
	"tests_are_added": { "section": "Quality", "required": true, "description": "The project MUST have evidence that the test_policy for adding tests has been adhered to in the most recent major changes to the software produced by the project.", "type": "Project Quality", "details": "Major functionality would typically be mentioned in the release notes. Perfection is not required, merely evidence that tests are typically being added in practice to the automated test suite when new major functionality is added to the software produced by the project." },
	"tests_documented_added": { "section": "Quality", "required": false, "description": "It is SUGGESTED that this policy on adding tests (see test_policy) be documented in the instructions for change proposals.", "type": "Project Quality", "details": "However, even an informal rule is acceptable as long as the tests are being added in practice." },
	"version_semver": { "section": "Change Control", "required": false, "description": "It is SUGGESTED that the Semantic Versioning (SemVer) format be used for releases.", "type": "Project Quality", "details": "Other version numbering schemes, such as commit IDs (such as git commit id or mercurial changeset id) or date-based schemes like YYYYMMDD, MAY be used as version numbers, since they are unique. Some alternatives can cause problems, because users may not be able to easily determine if they are up-to-date. SemVer may be less helpful for identifying software releases if all recipients only run the latest version (e.g., it is the code for a single website or internet service that is constantly updated via continuous delivery)." },
	"version_tags": { "section": "Change Control", "required": false, "description": "It is SUGGESTED that projects identify each release within their version control system. For example, it is SUGGESTED that those using git identify each release using git tags.", "type": "Project Quality", "details": "" },
	"version_unique": { "section": "Change Control", "required": true, "description": "The project results MUST have a unique version identifier for each release intended to be used by users.", "type": "Project Quality", "details": "This MAY be met in a variety of ways including a commit IDs (such as git commit id or mercurial changeset id) or a version number (including version numbers that use semantic versioning or date-based schemes like YYYYMMDD)." },
	"vulnerabilities_critical_fixed": { "section": "Security", "required": false, "description": "Projects SHOULD fix all critical vulnerabilities rapidly after they are reported.", "type": "Application Quality", "details": "" },
	"vulnerabilities_fixed_60_days": { "section": "Security", "required": true, "description": "There MUST be no unpatched vulnerabilities of medium or high severity that have been publicly known for more than 60 days.", "type": "Application Quality", "details": "The vulnerability must be patched and released by the project itself (patches may be developed elsewhere). A vulnerability becomes publicly known (for this purpose) once it has a CVE with publicly released non-paywalled information (reported, for example, in the <a href='https://nvd.nist.gov/'>National Vulnerability Database</a>) or when the project has been informed and the information has been released to the public (possibly by the project). A vulnerability is medium to high severity if its <a href='https://nvd.nist.gov/cvss.cfm'>CVSS 2.0</a> base score is 4 or higher. <strong>Note</strong>: this means that users might be left vulnerable to all attackers worldwide for up to 60 days. This criterion is often much easier to meet than what Google recommends in <a href='https://security.googleblog.com/2010/07/rebooting-responsible-disclosure-focus.html >Rebooting responsible disclosure</a>, because Google recommends that the 60-day period start when the project is notified <em>even</em> if the report is not public. Also note that this badge criterion, like other criteria, applies to the individual project. Some projects are part of larger umbrella organizations or larger projects, possibly in multiple layers, and many projects feed their results to other organizations and projects as part of a potentially-complex supply chain. An individual project often cannot control the rest, but an individual project can work to release a vulnerability patch in a timely way. Therefore, we focus solely on the individual project's response time. Once a patch is available from the individual project, others can determine how to deal with the patch (e.g., they can update to the newer version or they can apply just the patch as a cherry-picked solution)." },
	"vulnerability_report_private": { "section": "Reporting", "required": true, "description": "If private vulnerability reports are supported, the project MUST include how to send the information in a way that is kept private. (URL required)", "type": "Project Quality", "details": "Examples include a private defect report submitted on the web using HTTPS (TLS) or an email encrypted using OpenPGP. If vulnerability reports are always public (so there are never private vulnerability reports), choose 'not applicable (N/A)." },
	"vulnerability_report_process": { "section": "Reporting", "required": true, "description": "The project MUST publish the process for reporting vulnerabilities on the project site. (URL required)", "type": "Project Quality", "details": "E.g., a clearly designated mailing address on https://PROJECTSITE/security, often in the form security@example.org. This MAY be the same as its bug reporting process. Vulnerability reports MAY always be public, but many projects have a private vulnerability reporting mechanism." },
	"vulnerability_report_response": { "section": "Reporting", "required": true, "description": "The project's initial response time for any vulnerability report received in the last 6 months MUST be less than or equal to 14 days.", "type": "Application Quality", "details": "If there have been no vulnerabilities reported in the last 6 months, choose 'not applicable' (N/A)." },
	"warnings": { "section": "Quality", "required": true, "description": "The project MUST enable one or more compiler warning flags, a 'safe' language mode, or use a separate 'linter' tool to look for code quality errors or common simple mistakes, if there is at least one FLOSS tool that can implement this criterion in the selected language.", "type": "Application Quality", "details": "Examples of compiler warning flags include gcc/clang '-Wall'. Examples of a 'safe' language mode include JavaScript 'use strict' and perl5's 'use warnings'. A separate 'linter tool is simply a tool that examines the source code to look for code quality errors or common simple mistakes. These are typically enabled within the source code or build instructions." },
	"warnings_fixed": { "section": "Quality", "required": true, "description": "The project MUST address warnings.", "type": "Application Quality", "details": "These are the warnings identified by the implementation of the <a href='#warnings >warnings</a> criterion. The project should fix warnings or mark them in the source code as false positives. Ideally there would be no warnings, but a project MAY accept some warnings (typically less than 1 warning per 100 lines or less than 10 warnings)." },
	"warnings_strict": { "section": "Quality", "required": false, "description": "It is SUGGESTED that projects be maximally strict with warnings in the software produced by the project, where practical.", "type": "Application Quality", "details": "Some warnings cannot be effectively enabled on some projects. What is needed is evidence that the project is striving to enable warning flags where it can, so that errors are detected early." },
    },
    "silver": {
	"access_continuity": { "section": "Basics", "required": true, "description": "The project MUST be able to continue with minimal interruption if any one person is incapacitated or killed. In particular, the project MUST be able to create and close issues, accept proposed changes, and release versions of software, within a week of confirmation that an individual is incapacitated or killed. This MAY be done by ensuring someone else has any necessary keys, passwords, and legal rights to continue the project. Individuals who run a FLOSS project MAY do this by providing keys in a lockbox and a will providing any needed legal rights (e.g., for DNS names). (URL required)", "type": "People", "details": "" },
	"accessibility_best_practices": { "section": "Basics", "required": false, "description": "The project (both project sites and project results) SHOULD follow accessibility best practices so that persons with disabilities can still participate in the project and use the project results where it is reasonable to do so.", "type": "Application Quality", "details": "For web applications, see the <a href='https://www.w3.org/TR/WCAG20/'>Web Content Accessibility Guidelines (WCAG 2.0)</a> and its supporting document <a href='https://www.w3.org/TR/UNDERSTANDING-WCAG20/Overview.html'>Understanding WCAG 2.0</a>; see also <a href='https://www.w3.org/standards/webdesign/accessibility'>W3C accessibility information</a>. For GUI applications, consider using the environment-specific accessibility guidelines (such as <a href='https://developer.gnome.org/accessibility-devel-guide/stable/'>Gnome</a>, <a href='https://accessibility.kde.org/'>KDE</a>, <a href='https://docs.xfce.org/xfce/xfce4-settings/accessibility'>XFCE</a>, <a href='https://developer.android.com/guide/topics/ui/accessibility/'>Android</a>, <a href='https://developer.apple.com/accessibility/ios/'>iOS</a>, <a href='https://www.apple.com/accessibility/osx/voiceover/'>Mac</a>, and <a href='https://msdn.microsoft.com/en-us/windows/uwp/accessibility/accessibility-overview'>Windows</a>). Some TUI applications (e.g. `ncurses` programs) can do certain things to make themselves more accessible (such as `alpine`'s `force-arrow-cursor` setting). Most command-line applications are fairly accessible as-is. This criterion is often N/A, e.g., for program libraries. Here are some examples of actions to take or issues to consider: <ul> <li>Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language (<a href='https://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv.html'>WCAG 2.0 guideline 1.1</a>)</li><li>Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. (<a href='https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-without-color.html'>WCAG 2.0 guideline 1.4.1</a>)</li><li>The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for large text, incidental text, and logotypes (<a href='https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html >WCAG 2.0 guideline 1.4.3</a>) </li><li>Make all functionality available from a keyboard (WCAG guideline 2.1) </li><li>A GUI or web-based project SHOULD test with at least one screen-reader on the target platform(s) (e.g. NVDA, Jaws, or WindowEyes on Windows; VoiceOver on Mac &amp; iOS; Orca on Linux/BSD; TalkBack on Android). TUI programs MAY work to reduce overdraw to prevent redundant reading by screen-readers. </li></ul>" },
	"achieve_passing": { "section": "Basics", "required": true, "description": "The project MUST achieve a passing level badge.", "type": "Project Quality", "details": "" },
	"assurance_case": { "section": "Security", "required": true, "description": "The project MUST provide an assurance case that justifies why its security requirements are met. The assurance case MUST include: a description of the threat model, clear identification of trust boundaries, an argument that secure design principles have been applied, and an argument that common implementation security weaknesses have been countered. (URL required)", "type": "Application Quality", "details": "An assurance case is 'a documented body of evidence that provides a convincing and valid argument that a specified set of critical claims regarding a system’s properties are adequately justified for a given application in a given environment' (<a href='https://www.nist.gov/publications/software-assurance-using-structured-assurance-case-models'>'Software Assurance Using Structured Assurance Case Models', Thomas Rhodes et al, NIST Interagency Report 7608</a>). Trust boundaries are boundaries where data or execution changes its level of trust, e.g., a server's boundaries in a typical web application. It's common to list secure design principles (such as Saltzer and Schroeer) and common implementation security weaknesses (such as the OWASP top 10 or CWE/SANS top 25), and show how each are countered. The <a href='https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md >BadgeApp assurance case</a> may be a useful example. This is related to documentation_security, documentation_architecture, and implement_secure_design." },
	"automated_integration_testing": { "section": "Quality", "required": true, "description": "An automated test suite MUST be applied on each check-in to a shared repository for at least one branch. This test suite MUST produce a report on test success or failure.", "type": "Application Quality", "details": "This requirement can be viewed as a subset of test_continuous_integration, but focused on just testing, without requiring continuous integration." },
	"build_non_recursive": { "section": "Quality", "required": true, "description": "The build system for the software produced by the project MUST NOT recursively build subdirectories if there are cross-dependencies in the subdirectories. If there is no build or installation system (e.g., typical JavaScript libraries), select 'not applicable' (N/A).", "type": "Application Quality", "details": "The project build system's internal dependency information needs to be accurate, otherwise, changes to the project may not build correctly. Incorrect builds can lead to defects (including vulnerabilities). A common mistake in large build systems is to use a 'recursive build' or 'recursive make , that is, a hierarchy of subdirectories containing source files, where each subdirectory is independently built. Unless each subdirectory is fully independent, this is a mistake, because the dependency information is incorrect." },
	"build_preserve_debug": { "section": "Quality", "required": false, "description": "The build and installation system SHOULD preserve debugging information if they are requested in the relevant flags (e.g., 'install -s' is not used). If there is no build or installation system (e.g., typical JavaScript libraries), select 'not applicable' (N/A).", "type": "Application Quality", "details": "E.G., setting CFLAGS (C) or CXXFLAGS (C++) should create the relevant debugging information if those languages are used, and they should not be stripped during installation. Debugging information is needed for support and analysis, and also useful for measuring the presence of hardening features in the compiled binaries." },
	"build_repeatable": { "section": "Quality", "required": true, "description": "The project MUST be able to repeat the process of generating information from source files and get exactly the same bit-for-bit result. If no building occurs (e.g., scripting languages where the source code is used directly instead of being compiled), select 'not applicable' (N/A).", "type": "Application Quality", "details": "GCC and clang users may find the -frandom-seed option useful; in some cases, this can be resolved by forcing some sort order. More suggestions can be found at the <a href='https://reproducible-builds.org/ >reproducible build</a> site." },
	"build_standard_variables": { "section": "Quality", "required": true, "description": "Build systems for native binaries MUST honor the relevant compiler and linker (environment) variables passed in to them (e.g., CC, CFLAGS, CXX, CXXFLAGS, and LDFLAGS) and pass them to compiler and linker invocations. A build system MAY extend them with additional flags; it MUST NOT simply replace provided values with its own. If no native binaries are being generated, select 'not applicable' (N/A).", "type": "Application Quality", "details": "It should be easy to enable special build features like Address Sanitizer (ASAN), or to comply with distribution hardening best practices (e.g., by easily turning on compiler flags to do so)." },
	"bus_factor": { "section": "Basics", "required": false, "description": "The project SHOULD have a 'bus factor' of 2 or more. (URL required)", "type": "People", "details": "A 'bus factor' (aka 'truck factor') is the minimum number of project members that have to suddenly disappear from a project ('hit by a bus') before the project stalls due to lack of knowledgeable or competent personnel. The <a href='https://github.com/mtov/truck-factor'>truck-factor</a> tool can estimate this for projects on GitHub. For more information, see <a href='https://www.researchgate.net/publication/272824568_assessing_the_bus_factor_of_git_repositories >Assessing the Bus Factor of Git Repositories</a> by Cosentino et al." },
	"code_of_conduct": { "section": "Basics", "required": true, "description": "The project MUST adopt a code of conduct and post it in a standard location. (URL required)", "type": "Project Quality", "details": "Projects may be able to improve the civility of their community and to set expectations about acceptable conduct by adopting a code of conduct. This can help avoid problems before they occur and make the project a more welcoming place to encourage contributions. This should focus only on behavior within the community/workplace of the project. Example codes of conduct are the <a href='https://www.kernel.org/doc/html/latest/process/code-of-conduct.html'>Linux kernel code of conduct</a>, the <a href='https://contributor-covenant.org/'>Contributor Covenant Code of Conduct</a>, the <a href='https://www.debian.org/code_of_conduct'>Debian Code of Conduct</a>, the <a href='https://www.ubuntu.com/about/about-ubuntu/conduct'>Ubuntu Code of Conduct</a>, the <a href='https://getfedora.org/code-of-conduct'>Fedora Code of Conduct</a>, the <a href='https://wiki.gnome.org/action/show/Foundation/CodeOfConduct'>GNOME Code Of Conduct</a>, the <a href='https://www.kde.org/code-of-conduct/'>KDE Community Code of Conduct</a>, the <a href='https://www.python.org/psf/codeofconduct/'>Python Community Code of Conduct</a>, <a href='https://www.ruby-lang.org/en/conduct/'>The Ruby Community Conduct Guideline</a>, and <a href='https://www.rust-lang.org/en-US/conduct.html >The Rust Code of Conduct</a>." },
	"coding_standards": { "section": "Quality", "required": true, "description": "The project MUST identify the specific coding style guides for the primary languages it uses, and require that contributions generally comply with it. (URL required)", "type": "Project Quality", "details": "In most cases this is done by referring to some existing style guide(s), possibly listing differences. These style guides can include ways to improve readability and ways to reduce the likelihood of defects (including vulnerabilities). Many programming languages have one or more widely-used style guides. Examples of style guides include <a href='https://github.com/google/styleguide'>Google's style guides</a> and <a href='https://www.securecoding.cert.org/ >SEI CERT Coding Standards</a>." },
	"coding_standards_enforced": { "section": "Quality", "required": true, "description": "The project MUST automatically enforce its selected coding style(s) if there is at least one FLOSS tool that can do so in the selected language(s).", "type": "Project Quality", "details": "This MAY be implemented using static analysis tool(s) and/or by forcing the code through code reformatters. In many cases the tool configuration is included in the project's repository (since different projects may choose different configurations). Projects MAY allow style exceptions (and typically will); where exceptions occur, they MUST be rare and documented in the code at their locations, so that these exceptions can be reviewed and so that tools can automatically handle them in the future. Examples of such tools include ESLint (JavaScript), Rubocop (Ruby), and <a href='https://cran.r-project.org/web/packages/devtools/index.html >devtools check</a> (R)." },
	"contribution_requirements": { "section": "Basics", "required": true, "description": "The information on how to contribute MUST include the requirements for acceptable contributions (e.g., a reference to any required coding standard). (URL required)", "type": "Project Quality", "details": "" },
	"crypto_algorithm_agility": { "section": "Security", "required": false, "description": "The project SHOULD support multiple cryptographic algorithms, so users can quickly switch if one is broken. Common symmetric key algorithms include AES, Twofish, and Serpent. Common cryptographic hash algorithm alternatives include SHA-2 (including SHA-224, SHA-256, SHA-384 AND SHA-512) and SHA-3.", "type": "Application Quality", "details": "" },
	"crypto_certificate_verification": { "section": "Security", "required": true, "description": "The software produced by the project MUST, if it supports TLS, perform TLS certificate verification by default when using TLS, including on subresources. If the software does not use TLS, select 'not applicable' (N/A).", "type": "Application Quality", "details": "Note that incorrect TLS certificate verification is a common mistake. For more information, see <a href='https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html'>'The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software' by Martin Georgiev et al.</a> and <a href='https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/'>'Do you trust this application? by Michael Catanzaro</a>." },
	"crypto_credential_agility": { "section": "Security", "required": true, "description": "The project MUST support storing authentication credentials (such as passwords and dynamic tokens) and private cryptographic keys in files that are separate from other information (such as configuration files, databases, and logs), and permit users to update and replace them without code recompilation. If the project never processes authentication credentials and private cryptographic keys, select 'not applicable' (N/A).", "type": "Application Quality", "details": "" },
	"crypto_tls12": { "section": "Security", "required": false, "description": "The software produced by the project SHOULD, if it supports or uses TLS, support at least TLS version 1.2. Note that the predecessor of TLS was called SSL. If the software does not use TLS, select 'not applicable' (N/A).", "type": "Application Quality", "details": "" },
	"crypto_used_network": { "section": "Security", "required": false, "description": "The software produced by the project SHOULD support secure protocols for all of its network communications, such as SSHv2 or later, TLS1.2 or later (HTTPS), IPsec, SFTP, and SNMPv3. Insecure protocols such as FTP, HTTP, telnet, SSLv3 or earlier, and SSHv1 SHOULD be disabled by default, and only enabled if the user specifically configures it. If the software produced by the project does not support network communications, select 'not applicable' (N/A).", "type": "Application Quality", "details": "" },
	"crypto_verification_private": { "section": "Security", "required": true, "description": "The software produced by the project MUST, if it supports TLS, perform certificate verification before sending HTTP headers with private information (such as secure cookies). If the software does not use TLS, select 'not applicable' (N/A).", "type": "Application Quality", "details": "" },
	"crypto_weaknesses": { "section": "Security", "required": true, "description": "The default security mechanisms within the software produced by the project MUST NOT depend on cryptographic algorithms or modes with known serious weaknesses (e.g., the SHA-1 cryptographic hash algorithm or the CBC mode in SSH).", "type": "Application Quality", "details": "Concerns about CBC mode in SSH are discussed in <a href='https://www.kb.cert.org/vuls/id/958563 >CERT: SSH CBC vulnerability</a>." },
	"dco": { "section": "Basics", "required": false, "description": "The project SHOULD have a legal mechanism where all developers of non-trivial amounts of project software assert that they are legally authorized to make these contributions. The most common and easily-implemented approach for doing this is by using a Developer Certificate of Origin (DCO), where users add 'signed-off-by' in their commits and the project links to the DCO website. However, this MAY be implemented as a Contributor License Agreement (CLA), or other legal mechanism. (URL required)", "type": "Project Quality", "details": "The DCO is the recommended mechanism because it's easy to implement, tracked in the source code, and git directly supports a 'signed-off' feature using 'commit -s'. To be most effective it is best if the project documentation explains what 'signed-off' means for that project. A CLA is a legal agreement that defines the terms under which intellectual works have been licensed to an organization or project. A contributor assignment agreement (CAA) is a legal agreement that transfers rights in an intellectual work to another party; projects are not required to have CAAs, since having CAA increases the risk that potential contributors will not contribute, especially if the receiver is a for-profit organization. The <a href='https://www.apache.org/licenses/ >Apache Software Foundation CLAs (the individual contributor license and the corporate CLA)</a> are examples of CLAs, for projects which determine that the risks of these kinds of CLAs to the project are less than their benefits." },
	"dependency_monitoring": { "section": "Quality", "required": true, "description": "Projects MUST monitor or periodically check their external dependencies (including convenience copies) to detect known vulnerabilities, and fix exploitable vulnerabilities or verify them as unexploitable.", "type": "Application Quality", "details": "This can be done using an origin analyzer / dependency checking tool / software composition analysis tool such as <a href='https://www.owasp.org/index.php/OWASP_Dependency_Check'>OWASP's Dependency-Check</a>, <a href='https://www.sonatype.com/nexus-auditor'>Sonatype's Nexus Auditor</a>, <a href='https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html'>Synopsys' Black Duck Software Composition Analysis</a>, and <a href='https://github.com/rubysec/bundler-audit >Bundler-audit (for Ruby)</a>. Some package managers include mechanisms to do this. It is acceptable if the components' vulnerability cannot be exploited, but this analysis is difficult and it is sometimes easier to simply update or fix the part." },
	"documentation_achievements": { "section": "Basics", "required": true, "description": "The project repository front page and/or website MUST identify and hyperlink to any achievements, including this best practices badge, within 48 hours of public recognition that the achievement has been attained. (URL required)", "type": "Project Quality", "details": "An achievement is any set of external criteria that the project has specifically worked to meet, including some badges. This information does not need to be on the project website front page. A project using GitHub can put achievements on the repository front page by adding them to the README file." },
	"documentation_architecture": { "section": "Basics", "required": true, "description": "The project MUST include documentation of the architecture (aka high-level design) of the software produced by the project. If the project does not produce software, select 'not applicable' (N/A). (URL required)", "type": "Project Quality", "details": "A software architecture explains a program's fundamental structures, i.e., the program's major components, the relationships among them, and the key properties of these components and relationships." },
	"documentation_current": { "section": "Basics", "required": true, "description": "The project MUST make an effort to keep the documentation consistent with the current version of the project results (including software produced by the project). Any known documentation defects making it inconsistent MUST be fixed. If the documentation is generally current, but erroneously includes some older information that is no longer true, just treat that as a defect, then track and fix as usual.", "type": "Project Quality", "details": "The documentation MAY include information about differences or changes between versions of the software and/or link to older versions of the documentation. The intent of this criterion is that an effort is made to keep the documentation consistent, not that the documentation must be perfect." },
	"documentation_quick_start": { "section": "Basics", "required": true, "description": "The project MUST provide a 'quick start' guide for new users to help them quickly do something with the software. (URL required)", "type": "Project Quality", "details": "The idea is to show users how to get started and make the software do anything at all. This is critically important for potential users to get started." },
	"documentation_roadmap": { "section": "Basics", "required": true, "description": "The project MUST have a documented roadmap that describes what the project intends to do and not do for at least the next year. (URL required)", "type": "Project Quality", "details": "The project might not achieve the roadmap, and that's fine; the purpose of the roadmap is to help potential users and constributors understand the intended direction of the project. It need not be detailed." },
	"documentation_security": { "section": "Basics", "required": true, "description": "The project MUST document what the user can and cannot expect in terms of security from the software produced by the project (its 'security requirements'). (URL required)", "type": "Infrastructure", "details": "These are the security requirements that the software is intended to meet." },
	"dynamic_analysis_unsafe": { "section": "Analysis", "required": true, "description": "If the software produced by the project includes software written using a memory-unsafe language (e.g., C or C++), then at least one dynamic tool (e.g., a fuzzer or web application scanner) MUST be routinely used in combination with a mechanism to detect memory safety problems such as buffer overwrites. If the project does not produce software written in a memory-unsafe language, choose 'not applicable' (N/A).", "type": "Application Quality", "details": "Examples of mechanisms to detect memory safety problems include <a href='https://github.com/google/sanitizers/wiki/AddressSanitizer'>Address Sanitizer (ASAN)</a> (available in GCC and LLVM), <a href='https://clang.llvm.org/docs/MemorySanitizer.html'>Memory Sanitizer</a>, and <a href='http://valgrind.org/'>valgrind</a>. Other potentially-used tools include <a href='https://clang.llvm.org/docs/ThreadSanitizer.html'>thread sanitizer</a> and <a href='https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html >undefined behavior sanitizer</a>. Widespread assertions would also work." },
	"external_dependencies": { "section": "Quality", "required": true, "description": "The project MUST list external dependencies in a computer-processable way. (URL required)", "type": "Project Quality", "details": "Typically this is done using the conventions of package manager and/or build system. Note that this helps implement <a href='#installation_development_quick >installation_development_quick</a>." },
	"governance": { "section": "Basics", "required": true, "description": "The project MUST clearly define and document its project governance model (the way it makes decisions, including key roles). (URL required)", "type": "Project Quality", "details": "There needs to be some well-established documented way to make decisions and resolve disputes. In small projects, this may be as simple as 'the project owner and lead makes all final decisions'. There are various governance models, including benevolent dictator and formal meritocracy; for more details, see <a href='http://oss-watch.ac.uk/resources/governancemodels >Governance models</a>. Both centralized (e.g., single-maintainer) and decentralized (e.g., group maintainers) approaches have been successfully used in projects. The governance information does not need to document the possibility of creating a project fork, since that is always possible for FLOSS projects." },
	"hardening": { "section": "Security", "required": false, "description": "Hardening mechanisms SHOULD be used in the software produced by the project so that software defects are less likely to result in security vulnerabilities.", "type": "Application Quality", "details": "Hardening mechanisms may include HTTP headers like Content Security Policy (CSP), compiler flags to mitigate attacks (such as -fstack-protector), or compiler flags to eliminate undefined behavior. For our purposes least privilege is not considered a hardening mechanism (least privilege is important, but separate)." },
	"implement_secure_design": { "section": "Security", "required": true, "description": "The project MUST implement secure design principles (from 'know_secure_design'), where applicable. If the project is not producing software, select 'not applicable' (N/A).", "type": "Application Quality", "details": "For example, the project results should have fail-safe defaults (access decisions should deny by default, and projects' installation should be secure by default). They should also have complete mediation (every access that might be limited must be checked for authority and be non-bypassable). Note that in some cases principles will conflict, in which case a choice must be made (e.g., many mechanisms can make things more complex, contravening 'economy of mechanism / keep it simple)." },
	"input_validation": { "section": "Security", "required": true, "description": "The project results MUST check all inputs from potentially untrusted sources to ensure they are valid (a *whitelist*), and reject invalid inputs, if there are any restrictions on the data at all.", "type": "Application Quality", "details": "Note that comparing input against a list of 'bad formats' (aka a *blacklist*) is normally not enough, because attackers can often work around a blacklist. In particular, numbers are converted into internal formats and then checked if they are between their minimum and maximum (inclusive), and text strings are checked to ensure that they are valid text patterns (e.g., valid UTF-8, length, syntax, etc.). Some data may need to be 'anything at all (e.g., a file uploader), but these would typically be rare." },
	"installation_common": { "section": "Quality", "required": true, "description": "The project MUST provide a way to easily install and uninstall the software produced by the project using a commonly-used convention.", "type": "Project Quality", "details": "Examples include using a package manager (at the system or language level), 'make install/uninstall (supporting DESTDIR), a container in a standard format, or a virtual machine image in a standard format. The installation and uninstallation process (e.g., its packaging) MAY be implemented by a third party as long as it is FLOSS." },
	"installation_development_quick": { "section": "Quality", "required": true, "description": "The project MUST provide a way for potential developers to quickly install all the project results and support environment necessary to make changes, including the tests and test environment. This MUST be performed with a commonly-used convention.", "type": "Project Quality", "details": "This MAY be implemented using a generated container and/or installation script(s). External dependencies would typically be installed by invoking system and/or language package manager(s), per external_dependencies." },
	"installation_standard_variables": { "section": "Quality", "required": true, "description": "The installation system for end-users MUST honor standard conventions for selecting the location where built artifacts are written to at installation time. For example, if it installs files on a POSIX system it MUST honor the DESTDIR environment variable. If there is no installation system or no standard convention, select 'not applicable' (N/A).", "type": "Project Quality", "details": "" },
	"interfaces_current": { "section": "Quality", "required": false, "description": "The project SHOULD avoid using deprecated or obsolete functions and APIs where FLOSS alternatives are available in the set of technology it uses (its 'technology stack') and to a supermajority of the users the project supports (so that users have ready access to the alternative).", "type": "Application Quality", "details": "" },
	"internationalization": { "section": "Basics", "required": false, "description": "The software produced by the project SHOULD be internationalized to enable easy localization for the target audience's culture, region, or language. If internationalization (i18n) does not apply (e.g., the software doesn't generate text intended for end-users and doesn't sort human-readable text), select 'not applicable' (N/A).", "type": "Application Quality", "details": "Localization 'refers to the adaptation of a product, application or document content to meet the language, cultural and other requirements of a specific target market (a locale).' Internationalization is the 'design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language.' (See <a href='https://www.w3.org/International/questions/qa-i18n'>W3C's 'Localization vs. Internationalization </a>.) Software meets this criterion simply by being internationalized. No localization for another specific language is required, since once software has been internationalized it's possible for others to work on localization." },
	"maintenance_or_update": { "section": "Change Control", "required": true, "description": "The project MUST maintain the most often used older versions of the product or provide an upgrade path to newer versions. If the upgrade path is difficult, the project MUST document how to perform the upgrade (e.g., the interfaces that have changed and detailed suggested steps to help upgrade).", "type": "Project Quality", "details": "" },
	"regression_tests_added50": { "section": "Quality", "required": true, "description": "The project MUST add regression tests to an automated test suite for at least 50% of the bugs fixed within the last six months.", "type": "Application Quality", "details": "" },
	"report_tracker": { "section": "Reporting", "required": true, "description": "The project MUST use an issue tracker for tracking individual issues.", "type": "Project Quality", "details": "" },
	"roles_responsibilities": { "section": "Basics", "required": true, "description": "The project MUST clearly define and publicly document the key roles in the project and their responsibilities, including any tasks those roles must perform. It MUST be clear who has which role(s), though this might not be documented in the same way. (URL required)", "type": "People", "details": "The documentation for <a href='#governance >governance</a> and roles and responsibilities may be in one place." },
	"signed_releases": { "section": "Security", "required": true, "description": "The project MUST cryptographically sign releases of the project results intended for widespread use, and there MUST be a documented process explaining to users how they can obtain the public signing keys and verify the signature(s). The private key for these signature(s) MUST NOT be on site(s) used to directly distribute the software to the public. If releases are not intended for widespread use, select 'not applicable' (N/A).", "type": "Project Quality", "details": "The project results include both source code and any generated deliverables where applicable (e.g., executables, packages, and containers). Generated deliverables MAY be signed separately from source code. These MAY be implemented as signed git tags (using cryptographic digital signatures). Projects MAY provide generated results separately from tools like git, but in those cases, the separate results MUST be separately signed." },
	"sites_password_security": { "section": "Basics", "required": true, "description": "If the project sites (website, repository, and download URLs) store passwords for authentication of external users, the passwords MUST be stored as iterated hashes with a per-user salt by using a key stretching (iterated) algorithm (e.g., PBKDF2, Bcrypt or Scrypt). If the project sites do not store passwords for this purpose, select 'not applicable' (N/A).", "type": "Infrastructure", "details": "Note that the use of <a href='https://help.github.com/articles/github-security/ >GitHub</a> meets this criterion. This criterion only applies to passwords used for authentication of external users into the project sites. If the project sites must log in to other sites, they may need to store passwords for that purpose differently (since using an algorithm like Bcrypt would make those passwords useless). This applies criterion crypto_password_storage to the project sites, similar to sites_https." },
	"static_analysis_common_vulnerabilities": { "section": "Analysis", "required": true, "description": "The project MUST use at least one static analysis tool with rules or approaches to look for common vulnerabilities in the analyzed language or environment, if there is at least one FLOSS tool that can implement this criterion in the selected language.", "type": "Application Quality", "details": "Static analysis tools that are specifically designed to look for common vulnerabilities are more likely to find them. That said, using any static tools will typically help find some problems, so we are suggesting but not requiring this for the 'passing' level badge." },
	"test_policy_mandated": { "section": "Quality", "required": true, "description": "The project MUST have a formal written policy that as major new functionality is added, tests for the new functionality MUST be added to an automated test suite.", "type": "Project Quality", "details": "" },
	"test_statement_coverage80": { "section": "Quality", "required": true, "description": "The project MUST have FLOSS automated test suite(s) that provide at least 80% statement coverage if there is at least one FLOSS tool that can measure this criterion in the selected language.", "type": "Application Quality", "details": "Many FLOSS tools are available to measure test coverage, including gcov/lcov, Blanket.js, Istanbul, JCov, and <a href='https://cran.r-project.org/web/packages/covr/index.html >covr</a> (R). Note that meeting this criterion is not a guarantee that the test suite is thorough, instead, failing to meet this criterion is a strong indicator of a poor test suite." },
	"tests_documented_added": { "section": "Quality", "required": true, "description": "The project MUST include, in its documented instructions for change proposals, the policy that tests are to be added for major new functionality.", "type": "Project Quality", "details": "However, even an informal rule is acceptable as long as the tests are being added in practice." },
	"updateable_reused_components": { "section": "Quality", "required": true, "description": "Then, if a vulnerability is found in a reused component, it will be easy to update that component.", "type": "Project Quality", "details": "A typical way to meet this criterion is to use system and programming language package management systems. Many FLOSS programs are distributed with 'convenience libraries' that are local copies of standard libraries (possibly forked). By itself, that's fine. However, if the program *must* use these local (forked) copies, then updating the 'standard' libraries as a security update will leave these additional copies still vulnerable. This is especially an issue for cloud-based systems; if the cloud provider updates their 'standard' libaries but the program won't use them, then the updates don't actually help. See, e.g., <a href='https://spot.livejournal.com/312320.html'>'Chromium: Why it isn't in Fedora yet as a proper package by Tom Callaway</a>." },
	"version_tags_signed": { "section": "Security", "required": false, "description": "It is SUGGESTED that in the version control system, each important version tag (a tag that is part of a major release, minor release, or fixes publicly noted vulnerabilities) be cryptographically signed and verifiable as described in signed_releases.", "type": "Project Quality", "details": "" },
	"vulnerability_report_credit": { "section": "Reporting", "required": true, "description": "The project MUST give credit to the reporter(s) of all vulnerability reports resolved in the last 12 months, except for the reporter(s) who request anonymity. If there have been no vulnerabilities resolved in the last 12 months, select 'not applicable' (N/A). (URL required)", "type": "Project Quality", "details": "" },
	"vulnerability_response_process": { "section": "Reporting", "required": true, "description": "The project MUST have a documented process for responding to vulnerability reports. (URL required)", "type": "Project Quality", "details": "This is strongly related to vulnerability_report_process, which requires that there be a documented way to report vulnerabilities. It also related to vulnerability_report_response, which requires response to vulnerability reports within a certain time frame." },
	"warnings_strict": { "section": "Quality", "required": true, "description": "Projects MUST be maximally strict with warnings in the software produced by the project, where practical.", "type": "Application Quality", "details": "Some warnings cannot be effectively enabled on some projects. What is needed is evidence that the project is striving to enable warning flags where it can, so that errors are detected early." },
    },
    "gold": {
	"achieve_silver": { "section": "Basics", "required": true, "description": "The project MUST achieve a silver level badge.", "type": "Project Quality", "details": "" },
	"build_reproducible": { "section": "Quality", "required": true, "description": "The project MUST have a reproducible build. If no building occurs (e.g., scripting languages where the source code is used directly instead of being compiled), select 'not applicable' (N/A). (URL required)", "type": "Project Quality", "details": "A reproducible build means that multiple parties can independently redo the process of generating information from source files and get exactly the same bit-for-bit result. In some cases, this can be resolved by forcing some sort order. JavaScript developers may consider using npm shrinkwrap and webpack OccurenceOrderPlugin. GCC and clang users may find the -frandom-seed option useful. The build environment (including the toolset) can often be defined for external parties by specifying the cryptographic hash of a specific container or virtual machine that they can use for rebuilding. The <a href='https://reproducible-builds.org/docs/ >reproducible builds project has documentation on how to do this</a>." },
	"bus_factor": { "section": "Basics", "required": true, "description": "The project MUST have a 'bus factor' of 2 or more. (URL required)", "type": "People", "details": "A 'bus factor' (aka 'truck factor') is the minimum number of project members that have to suddenly disappear from a project ('hit by a bus') before the project stalls due to lack of knowledgeable or competent personnel. The <a href='https://github.com/mtov/truck-factor'>truck-factor</a> tool can estimate this for projects on GitHub. For more information, see <a href='https://www.researchgate.net/publication/272824568_assessing_the_bus_factor_of_git_repositories >Assessing the Bus Factor of Git Repositories</a> by Cosentino et al." },
	"code_review_standards": { "section": "Quality", "required": true, "description": "The project MUST document its code review requirements, including how code review is conducted, what must be checked, and what is required to be acceptable. (URL required)", "type": "Project Quality", "details": "See also <a href='#two_person_review >two_person_review</a> and contribution_requirements." },
	"contributors_unassociated": { "section": "Basics", "required": true, "description": "The project MUST have at least two unassociated significant contributors. (URL required)", "type": "Project Quality", "details": "Contributors are associated if they are paid to work by the same organization (as an employee or contractor) and the organization stands to benefit from the project's results. Financial grants do not count as being from the same organization if they pass through other organizations (e.g., science grants paid to different organizations from a common government or NGO source do not cause contributors to be associated). Someone is a significant contributor if they have made non-trivial contributions to the project in the past year. Examples of good indicators of a significant contributor are: written at least 1,000 lines of code, contributed 50 commits, or contributed at least 20 pages of documentation." },
	"copyright_per_file": { "section": "Basics", "required": true, "description": "The project MUST include a copyright statement in each source file, identifying at least one relevant year and copyright holder.", "type": "Project Quality", "details": "This MAY be done by including the following inside a comment near the beginning of each file: '<tt>Copyright [year this project or content started] - [most recent year modified], [project founder] and the [project name] contributors.</tt>" },
	"crypto_tls12": { "section": "Security", "required": true, "description": "The software produced by the project MUST, if it supports or uses TLS, support at least TLS version 1.2. Note that the predecessor of TLS was called SSL. If the software does not use TLS, select 'not applicable' (N/A).", "type": "Application Quality", "details": "" },
	"crypto_used_network": { "section": "Security", "required": true, "description": "The software produced by the project MUST support secure protocols for all of its network communications, such as SSHv2 or later, TLS1.2 or later (HTTPS), IPsec, SFTP, and SNMPv3. Insecure protocols such as FTP, HTTP, telnet, SSLv3 or earlier, and SSHv1 MUST be disabled by default, and only enabled if the user specifically configures it. If the software produced by the project does not support network communications, select 'not applicable' (N/A).", "type": "Application Quality", "details": "" },
	"dynamic_analysis": { "section": "Analysis", "required": true, "description": "The project MUST apply at least one dynamic analysis tool to any proposed major production release of the software produced by the project before its release.", "type": "Application Quality", "details": "A dynamic analysis tool examines the software by executing it with specific inputs. For example, the project MAY use a fuzzing tool (e.g., <a href='http://lcamtuf.coredump.cx/afl/'>American Fuzzy Lop</a>) or a web application scanner (e.g., <a href='https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project'>OWASP ZAP</a> or <a href='https://w3af.org/'>w3af</a>). In some cases the <a href='https://github.com/google/oss-fuzz#introduction'>OSS-Fuzz</a> project may be willing to apply fuzz testing to your project. For purposes of this criterion the dynamic analysis tool needs to vary the inputs in some way to look for various kinds of problems <em>or</em> be an automated test suite with at least 80% branch coverage. The <a href='https://en.wikipedia.org/wiki/Dynamic_program_analysis'>Wikipedia page on dynamic analysis</a> and the <a href='https://www.owasp.org/index.php/Fuzzing >OWASP page on fuzzing</a> identify some dynamic analysis tools. The analysis tool(s) MAY be focused on looking for security vulnerabilities, but this is not required." },
	"dynamic_analysis_enable_assertions": { "section": "Analysis", "required": false, "description": "The project SHOULD include many run-time assertions in the software it produces and check those assertions during dynamic analysis.", "type": "Application Quality", "details": "" },
	"hardened_site": { "section": "Security", "required": true, "description": "The project website, repository (if accessible via the web), and download site (if separate) MUST include key hardening headers with nonpermissive values. (URL required)", "type": "Infrastructure", "details": "Note that GitHub is known to meet this. Sites such as https://securityheaders.io/ can quickly check this. The key hardening headers are: Content Security Policy (CSP), HTTP Strict Transport Security (HSTS), X-Content-Type-Options (as 'nosniff ), X-Frame-Options, and X-XSS-Protection. Static web sites with no ability to log in via the web pages may omit the CSP and X-XSS-Protection HTTP hardening headers, because in that situation those headers are less effective." },
	"hardening": { "section": "Security", "required": true, "description": "Hardening mechanisms MUST be used in the software produced by the project so that software defects are less likely to result in security vulnerabilities. (URL required)", "type": "Application Quality", "details": "Hardening mechanisms may include HTTP headers like Content Security Policy (CSP), compiler flags to mitigate attacks (such as -fstack-protector), or compiler flags to eliminate undefined behavior. For our purposes least privilege is not considered a hardening mechanism (least privilege is important, but separate)." },
	"license_per_file": { "section": "Basics", "required": true, "description": "The project MUST include a license statement in each source file. This MAY be done by including the following inside a comment near the beginning of each file: SPDX-License-Identifier: [SPDX license expression for project].", "type": "Project Quality", "details": "This MAY also be done by including a statement in natural language identifying the license. The project MAY also include a stable URL pointing to the license text, or the full license text. Note that the criterion license_location requires the project license be in a standard location. See <a href='https://github.com/david-a-wheeler/spdx-tutorial'>this SPDX tutorial</a> for more information about SPDX license expressions. Note the relationship with <a href='#copyright_per_file >copyright_per_file</a>, whose content would typically precede the license information." },
	"repo_distributed": { "section": "Change Control", "required": true, "description": "The project's source repository MUST use a common distributed version control software (e.g., git or mercurial).", "type": "Infrastructure", "details": "Git is not specifically required and projects can use centralized version control software (such as subversion) with justification." },
	"require_2FA": { "section": "Change Control", "required": true, "description": "The project MUST require two-factor authentication (2FA) for developers for changing a central repository or accessing sensitive data (such as private vulnerability reports). This 2FA mechanism MAY use mechanisms without cryptographic mechanisms such as SMS, though that is not recommended.", "type": "Infrastructure", "details": "" },
	"secure_2FA": { "section": "Change Control", "required": false, "description": "The project's two-factor authentication (2FA) SHOULD use cryptographic mechanisms to prevent impersonation. Short Message Service (SMS) based 2FA, by itself, does NOT meet this criterion, since it is not encrypted.", "type": "Infrastructure", "details": "A 2FA mechanism that meets this criterion would be a Time-based One-Time Password (TOTP) application that automatically generates an authentication code that changes after a certain period of time. Note that <a href='https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/ >GitHub supports TOTP</a>." },
	"security_review": { "section": "Security", "required": true, "description": "The project MUST have performed a security review within the last 5 years. This review MUST consider the security requirements and security boundary.", "type": "Application Quality", "details": "This MAY be done by the project members and/or an independent evaluation. This evaluation MAY be supported by static and dynamic analysis tools, but there also must be human review to identify problems (particularly in design) that tools cannot detect." },
	"small_tasks": { "section": "Change Control", "required": true, "description": "The project MUST clearly identify small tasks that can be performed by new or casual contributors. (URL required)", "type": "People", "details": "This identification is typically done by marking selected issues in an issue tracker with one or more tags the project uses for the purpose, e.g., <a href='https://up-for-grabs.net/#/'>up-for-grabs</a>, <a href='https://www.firsttimersonly.com/'>first-timers-only</a>, 'Small fix , microtask, or IdealFirstBug. These new tasks need not involve adding functionality; they can be improving documentation, adding test cases, or anything else that aids the project and helps the contributor understand more about the project." },
	"test_branch_coverage80": { "section": "Quality", "required": true, "description": "The project MUST have FLOSS automated test suite(s) that provide at least 80% branch coverage if there is at least one FLOSS tool that can measure this criterion in the selected language.", "type": "Application Quality", "details": "" },
	"test_continuous_integration": { "section": "Quality", "required": true, "description": "The project MUST implement continuous integration, where new or changed code is frequently integrated into a central code repository and automated tests are run on the result. (URL required)", "type": "Project Quality", "details": "In most cases this means that each developer who works full-time on the project integrates at least daily." },
	"test_invocation": { "section": "Quality", "required": true, "description": "A test suite MUST be invocable in a standard way for that language. (URL required)", "type": "Project Quality", "details": "For example, 'make check', 'mvn test', or 'rake test (Ruby)." },
	"test_statement_coverage90": { "section": "Quality", "required": true, "description": "The project MUST have FLOSS automated test suite(s) that provide at least 90% statement coverage if there is at least one FLOSS tool that can measure this criterion in the selected language.", "type": "Application Quality", "details": "" },
	"two_person_review": { "section": "Quality", "required": true, "description": "The project MUST have at least 50% of all proposed modifications reviewed before release by a person other than the author, to determine if it is a worthwhile modification and free of known issues which would argue against its inclusion", "type": "Application Quality", "details": "" },
    }
}
